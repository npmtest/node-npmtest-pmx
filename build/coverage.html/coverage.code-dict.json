{"/home/travis/build/npmtest/node-npmtest-pmx/test.js":"/* istanbul instrument in package npmtest_pmx */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pmx/lib.npmtest_pmx.js":"/* istanbul instrument in package npmtest_pmx */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_pmx = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_pmx = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-pmx/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-pmx && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_pmx */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_pmx\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_pmx.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_pmx.rollup.js'] =\n            local.assetsDict['/assets.npmtest_pmx.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_pmx.__dirname + '/lib.npmtest_pmx.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/index.js":"\nmodule.exports = exports = require(\"./lib/pmx\");\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/pmx.js":"\nvar Events      = require('./events.js');\nvar Actions     = require('./actions.js');\nvar Notify      = require('./notify.js');\nvar Transaction = require('./transaction.js');\nvar Network     = require('./network.js');\nvar Monitor     = require('./monitor.js');\nvar Profiling   = require('./probes/profiling.js');\nvar Probe       = require('./Probe.js');\n\nvar Configuration   = require('./configuration.js');\n\nvar util        = require('util');\n\nvar PMX      = {};\n\n/**\n * Flatten API\n */\nutil._extend(PMX, Events);\nutil._extend(PMX, Actions);\nutil._extend(PMX, Notify);\nutil._extend(PMX, Monitor);\nutil._extend(PMX, Configuration);\nutil._extend(PMX, Probe);\nutil._extend(PMX, Network);\nutil._extend(PMX, Profiling);\nutil._extend(PMX, Transaction);\n\n// Grab defaut configuration\nPMX._pmx_conf = Configuration.init({}, true);\n\nPMX.init = function(opts) {\n  if (!opts) opts = {};\n\n  opts = util._extend({\n    default_actions : true,\n    transactions  : false,\n    http          : true,\n    http_latency  : 200,\n    http_code     : 500,\n    ignore_routes : [],\n    profiling     : true,\n    errors        : true,\n    // By default if you add alert subfield in custom\n    // it's going to be enabled\n    alert_enabled : true,\n    custom_probes : true,\n    network       : false,\n    ports         : false,\n\n    // VXX options\n    // ignoreFilter.url is aliased to ignore_routes\n    ignoreFilter: {\n      'url': [],\n      'method': ['OPTIONS']\n    },\n    // 'express', 'hapi', 'http', 'restify'\n    excludedHooks: []\n  }, opts);\n\n  opts = Configuration.init(opts);\n  this._pmx_conf = opts;\n\n  if (opts.ports)\n    PMX.catchPorts();\n  if (opts.network)\n    PMX.catchTraffic();\n\n  if (opts.transactions)\n    PMX.tracing(PMX, opts);\n  if (opts.http)\n    PMX.http(opts);\n\n  PMX.catchAll(opts);\n\n  if (opts.profiling)\n    Profiling.v8Profiling(PMX);\n\n  if (opts.custom_probes == true) {\n    // Event loop monitoring\n    require('./probes/pacemaker.js')(PMX);\n  }\n\n  if (opts.default_actions == true) {\n    //require('./actions/default.js')(PMX);\n  }\n\n  opts.isModule = false;\n  return this;\n};\n\nPMX.initModule = function(opts, cb) {\n  if (!opts) opts = {};\n\n  opts = util._extend({\n    alert_enabled    : true,\n    widget           : {}\n  }, opts);\n\n  opts.widget = util._extend({\n    type : 'generic',\n    logo : 'https://app.keymetrics.io/img/logo/keymetrics-300.png',\n    theme            : ['#111111', '#1B2228', '#807C7C', '#807C7C']\n  }, opts.widget);\n\n  opts.isModule = true;\n  opts = Configuration.init(opts);\n\n  // Force error catching\n  PMX.catchAll();\n\n  this._pmx_conf = opts;\n\n  if (cb && typeof(cb) == 'function')\n    return cb(null, opts);\n\n  return opts;\n};\n\nPMX.getConf = function() {\n  return this._pmx_conf;\n};\n\nPMX.getEnv = function() {\n  return process.env;\n};\n\n/**\n * Export\n */\nmodule.exports = PMX;\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/events.js":"\nvar debug     = require('debug')('axm:events');\nvar Transport = require('./utils/transport.js');\nvar Common    = require('./common.js');\nvar stringify = require('json-stringify-safe');\n\nvar Events    = {};\n\nEvents.emit = function(name, data) {\n  if (!name)\n    return console.error('[AXM] emit.name is missing');\n  if (!data)\n    return console.error('[AXM] emit.data is missing');\n\n  var inflight_obj = {};\n\n  if (typeof(data) == 'object')\n    inflight_obj = JSON.parse(stringify(data));\n  else {\n    inflight_obj.data = data;\n  }\n\n  inflight_obj.__name = name;\n\n  Transport.send({\n    type : 'human:event',\n    data : inflight_obj\n  }, true);\n  return false;\n};\n\nmodule.exports = Events;\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/utils/transport.js":"\nvar debug     = require('debug')('axm:transport');\nvar stringify = require('json-stringify-safe');\n\nvar Transport = module.exports = {};\n\nfunction ipcSend(args, print) {\n  /**\n   * For debug purpose\n   */\n  if (process.env.MODULE_DEBUG)\n    console.log(args);\n\n  if (!process.send) {\n    var output = args.data;\n    delete output.__name;\n    return false;\n  }\n\n\n  try {\n    process.send(JSON.parse(stringify(args)));\n  } catch(e) {\n    console.error('Process disconnected from parent !');\n    console.error(e.stack || e);\n    process.exit(1);\n  }\n};\n\nTransport.send = function(args, print) {\n  if (!print) print = false;\n\n  ipcSend(args, print);\n};\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/common.js":"\nvar Common = module.exports =  {};\n\nCommon.getDate = function getDate() {\n  return Math.round(Date.now() / 1000);\n};\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/actions.js":"var domain    = require('domain');\nvar debug     = require('debug')('axm:events');\nvar Common    = require('./common.js');\nvar Transport = require('./utils/transport.js');\n\nvar Actions = {};\n\nActions.action = function(action_name, opts, fn) {\n  if (!fn) {\n    fn = opts;\n    opts = null;\n  }\n\n  if (!action_name)\n    return console.error('[PMX] action.action_name is missing');\n  if (!fn)\n    return console.error('[PMX] emit.data is mission');\n\n  if (!process.send) {\n    debug('Process not running within PM2');\n    return false;\n  }\n\n  // Notify the action\n  Transport.send({\n    type : 'axm:action',\n    data : {\n      action_name : action_name,\n      opts        : opts,\n      arity       : fn.length\n    }\n  });\n\n  function reply(data) {\n    if (data.length) {\n      data._length = data.length;\n      delete data.length;\n    }\n\n    Transport.send({\n      type        : 'axm:reply',\n      data        : {\n        return      : data,\n        action_name : action_name\n      }\n    });\n  }\n\n  process.on('message', function(data) {\n    if (!data) return false;\n\n    // In case 2 arguments has been set but no options has been transmitted\n    if (fn.length === 2 && typeof(data) === 'string' && data === action_name)\n      return fn({}, reply);\n\n    // In case 1 arguments has been set but options has been transmitted\n    if (fn.length === 1 && typeof(data) === 'object' && data.msg === action_name)\n      return fn(reply);\n\n    /**\n     * Classical call\n     */\n    if (typeof(data) === 'string' && data === action_name)\n      return fn(reply);\n\n    /**\n     * If data is an object == v2 protocol\n     * Pass the opts as first argument\n     */\n    if (typeof(data) === 'object' && data.msg === action_name)\n      return fn(data.opts, reply);\n  });\n};\n\nActions.scopedAction = function(action_name, fn) {\n\n  if (!action_name)\n    return console.error('[PMX] action.action_name is missing');\n  if (!fn)\n    return console.error('[PMX] callback is missing');\n\n  if (!process.send) {\n    debug('Process not running within PM2');\n    return false;\n  }\n\n  // Notify the action\n  Transport.send({\n    type : 'axm:action',\n    data : {\n      action_name : action_name,\n      action_type : 'scoped'\n    }\n  });\n\n  process.on('message', function(data) {\n    if (!data\n        || data.uuid === undefined\n        || data.action_name === undefined)\n      return false;\n\n    if (data.action_name === action_name) {\n      var res = {\n        send : function(dt) {\n          Transport.send({\n            type        : 'axm:scoped_action:stream',\n            data        : {\n              data        : dt,\n              uuid        : data.uuid,\n              action_name : action_name\n            }\n          });\n        },\n        error : function(dt) {\n          Transport.send({\n            type        : 'axm:scoped_action:error',\n            data        : {\n              data        : dt,\n              uuid        : data.uuid,\n              action_name : action_name\n            }\n          });\n        },\n        end : function(dt) {\n          Transport.send({\n            type        : 'axm:scoped_action:end',\n            data        : {\n              data        : dt,\n              uuid        : data.uuid,\n              action_name : action_name\n            }\n          });\n        }\n      };\n\n      var d = domain.create();\n\n      d.on('error', function(err) {\n        res.error(err.message || err.stack || err);\n        setTimeout(function() {\n          process.exit(1);\n        }, 300);\n      });\n\n      d.run(function() {\n        fn(data.opts || null, res);\n      });\n    }\n  });\n};\n\nmodule.exports = Actions;\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/notify.js":"\nvar debug = require('debug')('axm:notify');\nvar util  = require('util');\nvar Common    = require('./common.js');\n\nvar Options = require('./configuration.js');\nvar Transport = require('./utils/transport.js');\n\nvar Notify = {};\n\n\nvar jsonize = function(err, filter, space) {\n  if (typeof(err) != 'object')\n    return err;\n\n  var plainObject = {};\n\n  Object.getOwnPropertyNames(err).forEach(function(key) {\n    plainObject[key] = err[key];\n  });\n  return plainObject;\n};\n\nNotify.catchAll = function(opts) {\n\n  var callsites = require('./utils/error-callsites')\n\n  if (opts === undefined)\n    opts = { errors : true };\n\n  Options.configureModule({\n    error : opts.errors\n  });\n\n  if (process.env.exec_mode === 'cluster_mode')\n    return false;\n\n  function getUncaughtExceptionListener(listener) {\n    return function uncaughtListener(err) {\n      var error = err && err.stack ? err.stack : err;\n\n      if (err && err.length) {\n        err._length = err.length;\n        delete err.length;\n      }\n\n      if (listener === 'unhandledRejection') {\n        error = 'You have triggered an unhandledRejection, you may have forgotten to catch a Promise rejection:\\n' + error;\n      }\n\n      console.error(error);\n      if (err)\n        var errObj = Notify._interpretError(err);\n\n      Transport.send({\n        type : 'process:exception',\n        data : errObj !== undefined ? errObj : {message: 'No error but ' + listener + ' was caught!' }\n      }, true);\n\n      if (!process.listeners(listener).filter(function (listener) {\n        return listener !== uncaughtListener;\n      }).length) {\n\n        if (listener == 'uncaughtException')\n          process.exit(1);\n      }\n    }\n  }\n\n  if (opts.errors === true && util.inspect(process.listeners('uncaughtException')).length === 2) {\n    process.once('uncaughtException', getUncaughtExceptionListener('uncaughtException'));\n    process.once('unhandledRejection', getUncaughtExceptionListener('unhandledRejection'));\n  }\n  else if (opts.errors === false\n           && util.inspect(process.listeners('uncaughtException')).length !== 2) {\n    process.removeAllListeners('uncaughtException');\n    process.removeAllListeners('unhandledRejection');\n  }\n};\n\nNotify._interpretError = function(err) {\n  var s_err = {};\n\n  if (typeof(err) === 'string') {\n    // Simple string processing\n    s_err.message = err;\n    s_err.stack = err;\n  }\n  else if (!(err instanceof Error) && typeof(err) === 'object') {\n    // JSON processing\n    s_err.message = err;\n    s_err.stack = err;\n  }\n  else if (err instanceof Error) {\n    // Error object type processing\n    err.stack;\n    if (err.__error_callsites) {\n      var stackFrames = [];\n       err.__error_callsites.forEach(function(callSite) {\n        stackFrames.push({ file_name: callSite.getFileName(), line_number: callSite.getLineNumber()});\n      });\n      err.stackframes = stackFrames;\n      delete err.__error_callsites;\n    }\n    s_err = err;\n  }\n\n  return jsonize(s_err);\n};\n\nNotify.notify = function(err) {\n  var ret_err = this._interpretError(err);\n\n  // full_err\n  //debug(ret_err);\n\n  Transport.send({\n    type : 'process:exception',\n    data : ret_err\n  }, true);\n\n  return ret_err;\n};\n\nNotify.expressErrorHandler = function() {\n  var self = this;\n\n  Options.configureModule({\n    error : true\n  });\n\n  return function errorHandler(err, req, res, next) {\n    if (res.statusCode < 400) res.statusCode = 500;\n\n    //debug(err.stack || err);\n\n    err.url = req.url;\n    err.component = req.url;\n    err.action = req.method;\n    err.params = req.body;\n    err.session = req.session;\n\n    Transport.send({\n      type  : 'process:exception',\n      data  : jsonize(err)\n    }, true);\n    return next(err);\n  };\n};\n\nmodule.exports = Notify;\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/configuration.js":"\nvar debug     = require('debug')('axm:events');\nvar Transport = require('./utils/transport.js');\nvar Autocast  = require('./utils/autocast.js');\nvar path      = require('path');\nvar fs        = require('fs');\nvar util      = require('util');\nvar pkg       = require('../package.json');\n\nvar Options = {};\n\n/**\n * https://github.com/Unitech/PM2/blob/master/lib/Satan.js#L249\n * Event axm:option:configuration caught in Satan.js\n */\nOptions.configureModule = function(opts) {\n  Transport.send({\n    type : 'axm:option:configuration',\n    data : opts\n  }, false);\n};\n\nfunction findPackageJson() {\n  var pkg_path = path.resolve(path.dirname(require.main.filename), 'package.json');\n\n  try {\n    fs.statSync(pkg_path);\n  } catch(e) {\n    try {\n      pkg_path = path.resolve(path.dirname(require.main.filename), '..', 'package.json');\n      fs.statSync(pkg_path);\n    } catch(e) {\n      debug('Cannot find package.json');\n      return null;\n    }\n    return pkg_path;\n  }\n\n  return pkg_path;\n}\n\nOptions.init = function(conf, do_not_tell_pm2) {\n  var package_filepath = findPackageJson();\n  var package_json;\n\n  if (!conf.module_conf)\n    conf.module_conf = {};\n\n  if (conf.isModule == true) {\n    /**\n     * Merge package.json metadata\n     */\n    try {\n      package_json = require(package_filepath);\n\n      conf.module_version = package_json.version;\n      conf.module_name    = package_json.name;\n      conf.description    = package_json.description;\n      conf.pmx_version    = null;\n\n      if (pkg.version)\n        conf.pmx_version    = pkg.version;\n\n      if (package_json.config) {\n        conf = util._extend(conf, package_json.config);\n        conf.module_conf = package_json.config;\n      }\n    } catch(e) {\n      throw new Error(e);\n    }\n  } else {\n    conf.module_name = process.env.name || 'outside-pm2';\n    try {\n      package_json = require(package_filepath);\n\n      conf.module_version = package_json.version;\n      conf.pmx_version    = null;\n\n      if (pkg.version)\n        conf.pmx_version    = pkg.version;\n\n      if (package_json.config) {\n        conf = util._extend(conf, package_json.config);\n        conf.module_conf = package_json.config;\n      }\n    } catch(e) {\n    }\n  }\n\n  /**\n   * If custom variables has been set, merge with returned configuration\n   */\n  try {\n    if (process.env[conf.module_name]) {\n      var casted_conf = Autocast(JSON.parse(process.env[conf.module_name]));\n      conf = util._extend(conf, casted_conf);\n      // Do not display probe configuration in Keymetrics\n      delete casted_conf.probes;\n      // This is the configuration variable modifiable from keymetrics\n      conf.module_conf = JSON.parse(JSON.stringify(util._extend(conf.module_conf, casted_conf)));\n\n      // Obfuscate passwords\n      Object.keys(conf.module_conf).forEach(function(key) {\n        if ((key == 'password' || key == 'passwd') &&\n            conf.module_conf[key].length >= 1) {\n          conf.module_conf[key] = 'Password hidden';\n        }\n\n      });\n    }\n  } catch(e) {\n    //console.error(e);\n    //console.error('Error while parsing configuration in environment (%s)', conf.module_name);\n  }\n\n  if (do_not_tell_pm2 == true) return conf;\n\n  Options.configureModule(conf);\n  return conf;\n};\n\nOptions.getPID = function(file) {\n  if (typeof(file) === 'number')\n    return file;\n  return parseInt(fs.readFileSync(file).toString());\n};\n\nOptions.resolvePidPaths = function(filepaths) {\n  if (typeof(filepaths) === 'number')\n    return filepaths;\n\n  function detect(filepaths) {\n    var content = '';\n\n    filepaths.some(function(filepath) {\n      try {\n        content = fs.readFileSync(filepath);\n      } catch(e) {\n        return false;\n      }\n      return true;\n    });\n\n    return content.toString().trim();\n  }\n\n  var ret = parseInt(detect(filepaths));\n\n  return isNaN(ret) ? null : ret;\n};\n\n\nmodule.exports = Options;\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/utils/autocast.js":"(function() {\n  /**\n   * Common strings to cast\n   */\n  var common_strings = {\n    'true': true,\n    'false': false,\n    'undefined': undefined,\n    'null': null,\n    'NaN': NaN\n  };\n\n  function process(key,value, o) {\n    if (typeof(value) == 'object') return;\n    o[key] = _cast(value);\n  }\n\n  function traverse(o,func) {\n    for (var i in o) {\n      func.apply(this,[i,o[i], o]);\n      if (o[i] !== null && typeof(o[i])==\"object\") {\n        //going on step down in the object tree!!\n        traverse(o[i],func);\n      }\n    }\n  }\n\n  function _cast(s) {\n    var key;\n\n    // Don't cast Date objects\n    if (s instanceof Date) return s;\n    if (typeof s == 'boolean') return s;\n\n    // Try to cast it to a number\n    if ((key = +s) == key) return key;\n\n    // Try to make it a common string\n    for (key in common_strings) {\n      if (s === key) return common_strings[key];\n    }\n\n    // Give up\n    return s;\n  }\n\n  /**\n   * Given a value, try and cast it\n   */\n  function autocast(s) {\n    if (typeof(s) == 'object') {\n      traverse(s, process);\n      return s;\n    }\n\n    return _cast(s);\n  };\n\n  // export\n  module.exports = autocast;\n}());\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/transaction.js":"\nvar util            = require('util');\nvar Proxy           = require('./utils/proxy.js');\nvar SimpleHttpWrap  = require('./wrapper/simple_http.js');\nvar Options         = require('./configuration.js');\nvar debug           = require('debug')('axm:tracing');\nvar Transport       = require('./utils/transport.js');\n\nvar Transaction = module.exports = {};\n\nTransaction.tracing = function (pmx, opts) {\n\n  if (Array.isArray(opts.ignore_routes) && opts.ignore_routes.length > 0) {\n    opts.ignoreFilter.url = opts.ignore_routes;\n  }\n\n  Transaction.tracer = require('vxx').start(opts);\n\n  Options.configureModule({\n    tracing_enabled : true\n  });\n  \n  // broadcast to pm2 aggregator\n  Transaction.tracer.getBus().on('transaction', function(data) {\n    Transport.send({\n      type: 'axm:trace',\n      data: data\n    })\n  })\n\n  // Transaction.tracer.getBus().on('transaction', function (data) {\n  //   if (!opts.custom_probes) return;\n  //   // TODO: mine tracing data and require custom probes\n  //   /*try {\n  //     var custom_probe = require('./probes/' + modul)(pmx, Transaction.tracer)\n  //   } catch (err) { }*/\n  // })\n};\n\nTransaction.http = function(opts) {\n  var Module = require('module');\n\n  debug('Wrapping HTTP routes');\n\n  if (Array.isArray(opts)) {\n    var routes = JSON.parse(JSON.stringify(opts));\n    opts = {\n      http          : true,\n      http_latency  : 200,\n      http_code     : 500,\n      ignore_routes : routes\n    };\n  }\n  opts = util._extend({\n    http          : true,\n    http_latency  : 200,\n    http_code     : 500,\n    ignore_routes : []\n  }, opts);\n\n  Proxy.wrap(Module, '_load', function(load) {\n    if (load.__axm_original) {\n      debug('HTTP routes have already been wrapped before');\n\n      Options.configureModule({\n        latency : opts.http\n      });\n\n      if (opts.http === false) {\n        return function(file) { return load.__axm_original.apply(this, arguments) };\n      } else {\n        return function(file) {\n          if (file === 'http' || file === 'https')\n            return SimpleHttpWrap(opts, load.__axm_original.apply(this, arguments));\n          else\n            return load.__axm_original.apply(this, arguments);\n        };\n      }\n    }\n\n    return function(file) {\n      if (opts.http &&\n          (file === 'http' || file === 'https')) {\n        debug('http module being required');\n        Options.configureModule({\n          latency : true\n        });\n        return SimpleHttpWrap(opts, load.apply(this, arguments));\n      }\n      else\n        return load.apply(this, arguments);\n    };\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/utils/proxy.js":"\nvar debug = require('debug')('axm:proxy');\n\n// var cls     = require('continuation-local-storage');\n// var ns      = cls.createNamespace('namespace');\n\nvar Proxy = module.exports = {\n  wrap : function(object, methods, hook) {\n    var self = this;\n\n    if (!Array.isArray(methods)) methods = [methods];\n\n    for (var i = 0; i < methods.length; ++i) {\n      debug('Wrapping method:', methods[i]);\n      var original = object[methods[i]];\n      if (!original) return debug('Method %s unknown', methods[i]);\n      if (original.__axm_original) {\n        debug('Already wrapped', methods[i]);\n        if (methods[i] != '_load')\n          return;\n      }\n      var hooked = hook(original);\n\n      if (original.__axm_original) {\n        hooked.__axm_original = original.__axm_original;\n      }\n      else {\n        hooked.__axm_original = original;\n      }\n      object[methods[i]] = hooked;\n      //debug('Method proxified');\n    }\n  }\n};","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/wrapper/simple_http.js":"\nvar Proxy     = require('../utils/proxy.js');\nvar Transport = require('../utils/transport.js');\nvar Probe     = require('../Probe.js');\n\nvar gl_meter, gl_latency;\n\nvar HttpWrap = module.exports = function(opts, http) {\n\n  gl_meter = require('../pmx').probe().meter({\n    name    : 'HTTP',\n    samples : 60,\n    unit    : 'req/min'\n  });\n\n  gl_latency = require('../pmx').probe().histogram({\n    measurement : 'mean',\n    name        : 'pmx:http:latency',\n    unit        : 'ms'\n  });\n\n  var ignoreRoutes = function(url) {\n    for (var i = 0; i < opts.ignore_routes.length; ++i) {\n      if (url.match(opts.ignore_routes[i]) != null) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  Proxy.wrap(http.Server.prototype, ['on', 'addListener'], function(addListener) {\n    return function(event, listener) {\n      var self = this;\n\n      var overloaded_function = function(request, response) {\n        gl_meter.mark();\n\n        var http_start = {\n          url    : request.url,\n          method : request.method,\n          start  : Date.now(),\n          ip     : request.headers['x-forwarded-for'] ||\n            (request.connection ? request.connection.remoteAddress : false) ||\n            (request.socket ? request.socket.remoteAddress : false) ||\n            ((request.connection && request.connection.socket) ? request.connection.socket.remoteAddress : false) || ''\n        };\n\n        response.once('finish', function() {\n\n          if (!ignoreRoutes(http_start.url))\n            gl_latency.update(Date.now() - http_start.start);\n\n          if (((Date.now() - http_start.start) >= opts.http_latency\n               || response.statusCode >= opts.http_code)\n              && !ignoreRoutes(http_start.url)) {\n\n            Transport.send({\n              type : 'http:transaction',\n              data : {\n                url        : http_start.url,\n                method     : http_start.method,\n                time       : Date.now() - http_start.start,\n                code       : response.statusCode,\n                ip         : http_start.ip,\n                size       : response.getHeader('Content-Length') || null\n              }\n            });\n          }\n\n          http_start = null;\n        });\n      };\n\n      if (!(event === 'request' && typeof listener === 'function'))\n        return addListener.apply(self, arguments);\n\n      if (self.__overloaded !== true) {\n\n        self.on('removeListener', function onRemoveListener() {\n          setTimeout(function() {\n            if (self.listeners('request').length === 1) {\n              self.removeListener('request', overloaded_function);\n              self.removeListener('removeListener', onRemoveListener);\n              self.__overloaded = false;\n            }\n          }, 200);\n        });\n\n        addListener.call(self, event, overloaded_function);\n\n        self.__overloaded = true;\n      }\n\n      return addListener.apply(self, arguments);\n    };\n  });\n  return http;\n};\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/Probe.js":"\nvar Counter   = require('./utils/probes/Counter.js');\nvar Histogram = require('./utils/probes/Histogram.js');\nvar Meter     = require('./utils/probes/Meter.js');\nvar Alert     = require('./utils/alert.js');\n\nvar Transport = require('./utils/transport.js');\n\nvar debug     = require('debug')('axm:probe');\nvar util      = require('util');\nvar Probe = {};\n\nProbe._started = false;\nProbe._var     = {};\n\nProbe.AVAILABLE_AGG_TYPES  = ['avg', 'min', 'max', 'sum', 'none'];\nProbe.AVAILABLE_MEASUREMENTS = [\n  'min',\n  'max',\n  'sum',\n  'count',\n  'variance',\n  'mean',\n  'stddev',\n  'median',\n  'p75',\n  'p95',\n  'p99',\n  'p999'\n];\nProbe.default_aggregation     = 'avg';\n\nfunction getValue(value) {\n  if (typeof(value) == 'function')\n    return value();\n  return value;\n}\n\n/**\n * Data that will be sent to Keymetrics\n */\nfunction cookData(data) {\n  var cooked_data = {};\n\n  Object.keys(data).forEach(function(probe_name) {\n\n    cooked_data[probe_name] = {\n      value: getValue(data[probe_name].value)\n    };\n\n    /**\n     * Attach aggregation mode\n     */\n    if (data[probe_name].agg_type &&\n        data[probe_name].agg_type != 'none')\n      cooked_data[probe_name].agg_type = data[probe_name].agg_type;\n\n    /**\n     * Attach Alert configuration\n     */\n    if (data[probe_name].alert)\n      cooked_data[probe_name].alert = data[probe_name].alert.serialize();\n    else\n      cooked_data[probe_name].alert = {};\n\n  });\n  return cooked_data;\n};\n\n/**\n * Tick system for Alerts\n */\nfunction checkIssues(data) {\n  Object.keys(data).forEach(function(probe_name) {\n    if (typeof(data[probe_name].alert) !== 'undefined') {\n      data[probe_name].alert.tick(getValue(data[probe_name].value));\n    }\n  });\n};\n\nfunction attachAlert(opts, conf) {\n  /**\n   * pm2 set module-name:probes:probe_name:value    20\n   * pm2 set module-name:probes:probe_name:mode     'threshold-avg'\n   * pm2 set module-name:probes:probe_name:cmp      '<'\n   * pm2 set module-name:probes:probe_name:interval 20\n   */\n  var alert_opts = {};\n\n  if (opts.alert)\n    alert_opts = opts.alert;\n\n  if (conf &&\n      conf.probes &&\n      conf.probes[opts.name]) {\n    // Default mode\n    if (!alert_opts.mode) alert_opts.mode = 'threshold';\n    alert_opts = util._extend(alert_opts, conf.probes[opts.name]);\n  }\n\n  if (alert_opts && alert_opts.mode == 'none') return false;\n\n  if (Object.keys(alert_opts).length > 0 && Probe._alert_activated == true) {\n    Probe._var[opts.name].alert = new Alert(alert_opts, {name : opts.name});\n  }\n}\n\nProbe.probe = function() {\n  var self = this;\n  // Get module configuration to enable alerts\n  if (this.getConf && this.getConf())\n    Probe._alert_activated = this.getConf().alert_enabled || true;\n  else\n    Probe._alert_activated = false;\n\n  if (Probe._started == false) {\n    Probe._started = true;\n\n    var p_interval = setInterval(function() {\n      Transport.send({\n        type : 'axm:monitor',\n        data : cookData(Probe._var)\n      });\n      checkIssues(Probe._var);\n    }, 990);\n\n    p_interval.unref();\n  }\n\n  return {\n    /**\n     * This reflect data to keymetrics\n     * pmx.transpose('prop name', fn)\n     *\n     * or\n     *\n     * pmx.transpose({\n     *   name : 'variable name',\n     *   data : function() { return value }\n     * });\n     */\n    transpose : function(variable_name, reporter) {\n      if (typeof variable_name === 'object') {\n        reporter = variable_name.data;\n        variable_name = variable_name.name;\n      }\n\n      if (typeof reporter !== 'function') {\n        return console.error('[PMX] reporter is not a function');\n      }\n\n      Probe._var[variable_name] = {\n        value: reporter\n      };\n    },\n    metric : function(opts) {\n      var agg_type = opts.agg_type || Probe.default_aggregation;\n\n      if (!opts.name)\n        return console.error('[Probe][Metric] Name not defined');\n      if (Probe.AVAILABLE_AGG_TYPES.indexOf(agg_type) == -1)\n        return console.error(\"[Probe][Metric] Unknown agg_type: %s\", agg_type);\n\n      Probe._var[opts.name] = {\n        value   : opts.value || 0,\n        agg_type: agg_type\n      };\n\n      /**\n       * Attach alert to: Probe._var[opts.name].alert\n       */\n      if (self.getConf)\n        attachAlert(opts, self.getConf());\n\n      return {\n        val : function() {\n          var value = Probe._var[opts.name].value;\n\n          if (typeof(value) == 'function')\n            value = value();\n\n          return value;\n        },\n        set : function(dt) {\n          Probe._var[opts.name].value = dt;\n        }\n      };\n    },\n    histogram : function(opts) {\n      if (!opts.name)\n        return console.error('[Probe][Histogram] Name not defined');\n      opts.measurement = opts.measurement || 'mean';\n      opts.unit = opts.unit || '';\n      var agg_type = opts.agg_type || Probe.default_aggregation;\n\n      if (Probe.AVAILABLE_MEASUREMENTS.indexOf(opts.measurement) == -1)\n        return console.error('[Probe][Histogram] Measure type %s does not exists', opts.measurement);\n      if (Probe.AVAILABLE_AGG_TYPES.indexOf(agg_type) == -1)\n        return console.error(\"[Probe][Metric] Unknown agg_type: %s\", agg_type);\n\n      var histogram = new Histogram(opts);\n\n      Probe._var[opts.name] = {\n        value: function() { return (Math.round(histogram.val() * 100) / 100) + '' + opts.unit },\n        agg_type: agg_type\n      };\n\n      /**\n       * Attach alert to: Probe._var[opts.name].alert\n       */\n      if (self.getConf)\n        attachAlert(opts, self.getConf());\n\n      return histogram;\n    },\n    meter : function(opts) {\n      var agg_type = opts.agg_type || Probe.default_aggregation;\n\n      if (!opts.name)\n        return console.error('[Probe][Meter] Name not defined');\n      if (Probe.AVAILABLE_AGG_TYPES.indexOf(agg_type) == -1)\n        return console.error(\"[Probe][Metric] Unknown agg_type: %s\", agg_type);\n\n      opts.unit = opts.unit || '';\n\n      var meter = new Meter(opts);\n\n      Probe._var[opts.name] = {\n        value: function() { return meter.val() + '' + opts.unit },\n        agg_type: agg_type\n      };\n\n      /**\n       * Attach alert to: Probe._var[opts.name].alert\n       */\n      if (self.getConf)\n        attachAlert(opts, self.getConf());\n\n      return meter;\n    },\n    counter : function(opts) {\n      var agg_type = opts.agg_type || Probe.default_aggregation;\n\n      if (!opts.name)\n        return console.error('[Probe][Counter] Name not defined');\n      if (Probe.AVAILABLE_AGG_TYPES.indexOf(agg_type) == -1)\n        return console.error(\"[Probe][Metric] Unknown agg_type: %s\", agg_type);\n\n      var counter = new Counter();\n\n      Probe._var[opts.name] = {\n        value: function() { return counter.val() },\n        agg_type: agg_type\n      };\n\n      /**\n       * Attach alert to: Probe._var[opts.name].alert\n       */\n      if (self.getConf)\n        attachAlert(opts, self.getConf());\n\n      return counter;\n    }\n  }\n};\n\nmodule.exports = Probe;\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/utils/probes/Counter.js":"\n// Hacked from https://github.com/felixge/node-measured\n\nmodule.exports = Counter;\n\nfunction Counter(opts) {\n  opts = opts || {};\n\n  this._count = opts.count || 0;\n}\n\nCounter.prototype.val = function() {\n  return this._count;\n};\n\nCounter.prototype.inc = function(n) {\n  this._count += (n || 1);\n};\n\nCounter.prototype.dec = function(n) {\n  this._count -= (n || 1);\n};\n\nCounter.prototype.reset = function(count) {\n  this._count = count || 0;\n};\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/utils/probes/Histogram.js":"\n// Hacked from https://github.com/felixge/node-measured\n\nvar EDS = require('../EDS.js');\n\nfunction Histogram(opts) {\n  var self = this;\n\n  opts = opts || {};\n\n  this._measurement = opts.measurement;\n  this._call_fn     = null;\n\n  var methods = {\n    min      : this.getMin,\n    max      : this.getMax,\n    sum      : this.getSum,\n    count    : this.getCount,\n    variance : this._calculateVariance,\n    mean     : this._calculateMean,\n    stddev   : this._calculateStddev,\n    ema      : this.getEma()\n  };\n\n  if (methods[this._measurement])\n    this._call_fn = methods[this._measurement];\n  else {\n    this._call_fn = function() {\n      var percentiles = this.percentiles([0.5, 0.75, 0.95, 0.99, 0.999]);\n\n      var medians = {\n        median   : percentiles[0.5],\n        p75      : percentiles[0.75],\n        p95      : percentiles[0.95],\n        p99      : percentiles[0.99],\n        p999     : percentiles[0.999]\n      };\n\n      return medians[this._measurement];\n    }\n  }\n  this._sample     = new EDS();\n  this._min        = null;\n  this._max        = null;\n  this._count      = 0;\n  this._sum        = 0;\n\n  // These are for the Welford algorithm for calculating running variance\n  // without floating-point doom.\n  this._varianceM = 0;\n  this._varianceS = 0;\n  this._ema = 0;\n}\n\nHistogram.prototype.update = function(value) {\n  this._count++;\n  this._sum += value;\n\n  this._sample.update(value);\n  this._updateMin(value);\n  this._updateMax(value);\n  this._updateVariance(value);\n  this._updateEma(value);\n};\n\nHistogram.prototype.percentiles = function(percentiles) {\n  var values = this._sample\n        .toArray()\n        .sort(function(a, b) {\n          return (a === b)\n            ? 0\n            : a - b;\n        });\n\n  var results = {};\n\n  for (var i = 0; i < percentiles.length; i++) {\n    var percentile = percentiles[i];\n    if (!values.length) {\n      results[percentile] = null;\n      continue;\n    }\n\n    var pos        = percentile * (values.length + 1);\n\n    if (pos < 1) {\n      results[percentile] = values[0];\n    } else if (pos >= values.length) {\n      results[percentile] = values[values.length - 1];\n    } else {\n      var lower = values[Math.floor(pos) - 1];\n      var upper = values[Math.ceil(pos) - 1];\n\n      results[percentile] = lower + (pos - Math.floor(pos)) * (upper - lower);\n    }\n  }\n\n  return results;\n};\n\nHistogram.prototype.reset = function() {\n  this.constructor.call(this);\n};\n\nHistogram.prototype.val = function() {\n  if (typeof(this._call_fn) === 'function')\n    return this._call_fn();\n  else\n    return this._call_fn;\n};\n\nHistogram.prototype.getMin = function() {\n  return this._min;\n};\n\nHistogram.prototype.getMax = function() {\n  return this._max;\n};\n\nHistogram.prototype.getSum = function() {\n  return this._sum;\n};\n\nHistogram.prototype.getCount = function() {\n  return this._count;\n};\n\nHistogram.prototype.getEma = function() {\n  return this._ema;\n}\n\nHistogram.prototype.fullResults = function() {\n  var percentiles = this.percentiles([0.5, 0.75, 0.95, 0.99, 0.999]);\n\n  return {\n    min      : this._min,\n    max      : this._max,\n    sum      : this._sum,\n    variance : this._calculateVariance(),\n    mean     : this._calculateMean(),\n    stddev   : this._calculateStddev(),\n    count    : this._count,\n    median   : percentiles[0.5],\n    p75      : percentiles[0.75],\n    p95      : percentiles[0.95],\n    p99      : percentiles[0.99],\n    p999     : percentiles[0.999],\n    ema      : this._ema\n  };\n};\n\nHistogram.prototype._updateMin = function(value) {\n  if (this._min === null || value < this._min) {\n    this._min = value;\n    //console.log(value);\n  }\n};\n\nHistogram.prototype._updateMax = function(value) {\n  if (this._max === null || value > this._max) {\n    this._max = value;\n  }\n};\n\nHistogram.prototype._updateVariance = function(value) {\n  if (this._count === 1) return this._varianceM = value;\n\n  var oldM = this._varianceM;\n\n  this._varianceM += ((value - oldM) / this._count);\n  this._varianceS += ((value - oldM) * (value - this._varianceM));\n};\n\nHistogram.prototype._updateEma = function(value) {\n  if (this._count <= 1) return this._ema = this._calculateMean();\n  var alpha = 2 / (1 + this._count);\n  this._ema = value * alpha + this._ema * (1 - alpha);\n}\n\nHistogram.prototype._calculateMean = function() {\n  return (this._count === 0)\n    ? 0\n    : this._sum / this._count;\n};\n\nHistogram.prototype._calculateVariance = function() {\n  return (this._count <= 1)\n    ? null\n    : this._varianceS / (this._count - 1);\n};\n\nHistogram.prototype._calculateStddev = function() {\n  return (this._count < 1)\n    ? null\n    : Math.sqrt(this._calculateVariance());\n};\n\nmodule.exports = Histogram;\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/utils/EDS.js":"\n// Hacked https://github.com/felixge/node-measured\n\nvar BinaryHeap = require('./BinaryHeap');\nvar units      = require('./units');\n\nmodule.exports = ExponentiallyDecayingSample;\nfunction ExponentiallyDecayingSample(options) {\n  options = options || {};\n\n  this._elements = new BinaryHeap({\n    score: function(element) {\n      return -element.priority;\n    }\n  });\n\n  this._rescaleInterval = options.rescaleInterval || ExponentiallyDecayingSample.RESCALE_INTERVAL;\n  this._alpha           = options.alpha || ExponentiallyDecayingSample.ALPHA;\n  this._size            = options.size || ExponentiallyDecayingSample.SIZE;\n  this._random          = options.random || this._random;\n  this._landmark        = null;\n  this._nextRescale     = null;\n  this._mean            = null;\n}\n\nExponentiallyDecayingSample.RESCALE_INTERVAL = 1 * units.HOURS;\nExponentiallyDecayingSample.ALPHA            = 0.015;\nExponentiallyDecayingSample.SIZE             = 1028;\n\nExponentiallyDecayingSample.prototype.update = function(value, timestamp) {\n  var now = Date.now();\n  if (!this._landmark) {\n    this._landmark    = now;\n    this._nextRescale = this._landmark + this._rescaleInterval;\n  }\n\n  timestamp = timestamp || now;\n\n  var newSize = this._elements.size() + 1;\n\n  var element = {\n    priority: this._priority(timestamp - this._landmark),\n    value: value\n  };\n\n  if (newSize <= this._size) {\n    this._elements.add(element);\n  } else if (element.priority > this._elements.first().priority) {\n    this._elements.removeFirst();\n    this._elements.add(element);\n  }\n\n  if (now >= this._nextRescale) this._rescale(now);\n};\n\nExponentiallyDecayingSample.prototype.toSortedArray = function() {\n  return this._elements\n    .toSortedArray()\n    .map(function(element) {\n      return element.value;\n    });\n};\n\n\nExponentiallyDecayingSample.prototype.toArray = function() {\n  return this._elements\n    .toArray()\n    .map(function(element) {\n      return element.value;\n    });\n};\n\nExponentiallyDecayingSample.prototype._weight = function(age) {\n  // We divide by 1000 to not run into huge numbers before reaching a\n  // rescale event.\n  return Math.exp(this._alpha * (age / 1000));\n};\n\nExponentiallyDecayingSample.prototype._priority = function(age) {\n  return this._weight(age) / this._random();\n};\n\nExponentiallyDecayingSample.prototype._random = function() {\n  return Math.random();\n};\n\nExponentiallyDecayingSample.prototype._rescale = function(now) {\n  now               = now || Date.now();\n\n  var self          = this;\n  var oldLandmark   = this._landmark;\n  this._landmark    = now || Date.now();\n  this._nextRescale = now + this._rescaleInterval;\n\n  var factor = self._priority(-(self._landmark - oldLandmark));\n\n  this._elements\n    .toArray()\n    .forEach(function(element) {\n      element.priority *= factor;\n    });\n};\n\nExponentiallyDecayingSample.prototype.avg = function(now) {\n  var sum = 0;\n  this._elements\n    .toArray()\n    .forEach(function(element) {\n      sum += element.value;\n    });\n  return (sum / this._elements.size());\n}\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/utils/BinaryHeap.js":"\n// Hacked https://github.com/felixge/node-measured\n\n// Based on http://en.wikipedia.org/wiki/Binary_Heap\n// as well as http://eloquentjavascript.net/appendix2.html\nmodule.exports = BinaryHeap;\nfunction BinaryHeap(options) {\n  options = options || {};\n\n  this._elements = options.elements || [];\n  this._score    = options.score || this._score;\n}\n\nBinaryHeap.prototype.add = function(/* elements */) {\n  for (var i = 0; i < arguments.length; i++) {\n    var element = arguments[i];\n\n    this._elements.push(element);\n    this._bubble(this._elements.length - 1);\n  }\n};\n\nBinaryHeap.prototype.first = function() {\n  return this._elements[0];\n};\n\nBinaryHeap.prototype.removeFirst = function() {\n  var root = this._elements[0];\n  var last = this._elements.pop();\n\n  if (this._elements.length > 0) {\n    this._elements[0] = last;\n    this._sink(0);\n  }\n\n  return root;\n};\n\nBinaryHeap.prototype.clone = function() {\n  return new BinaryHeap({\n    elements: this.toArray(),\n    score: this._score,\n  });\n};\n\nBinaryHeap.prototype.toSortedArray = function() {\n  var array = [];\n  var clone = this.clone();\n\n  while (true) {\n    var element = clone.removeFirst();\n    if (element === undefined) break;\n\n    array.push(element);\n  }\n\n  return array;\n};\n\nBinaryHeap.prototype.toArray = function() {\n  return [].concat(this._elements);\n};\n\nBinaryHeap.prototype.size = function() {\n  return this._elements.length;\n};\n\nBinaryHeap.prototype._bubble = function(bubbleIndex) {\n  var bubbleElement = this._elements[bubbleIndex];\n  var bubbleScore   = this._score(bubbleElement);\n\n  while (bubbleIndex > 0) {\n    var parentIndex   = this._parentIndex(bubbleIndex);\n    var parentElement = this._elements[parentIndex];\n    var parentScore   = this._score(parentElement);\n\n    if (bubbleScore <= parentScore) break;\n\n    this._elements[parentIndex] = bubbleElement;\n    this._elements[bubbleIndex]  = parentElement;\n    bubbleIndex                  = parentIndex;\n  }\n};\n\nBinaryHeap.prototype._sink = function(sinkIndex) {\n  var sinkElement = this._elements[sinkIndex];\n  var sinkScore   = this._score(sinkElement);\n  var length      = this._elements.length;\n\n  while (true) {\n    var swapIndex    = null;\n    var swapScore    = null;\n    var swapElement  = null;\n    var childIndexes = this._childIndexes(sinkIndex);\n\n    for (var i = 0; i < childIndexes.length; i++) {\n      var childIndex   = childIndexes[i];\n\n      if (childIndex >= length) break;\n\n      var childElement = this._elements[childIndex];\n      var childScore   = this._score(childElement);\n\n      if (childScore > sinkScore) {\n        if (swapScore === null || swapScore < childScore) {\n          swapIndex   = childIndex;\n          swapScore   = childScore;\n          swapElement = childElement;\n        }\n      }\n    }\n\n    if (swapIndex === null) break;\n\n    this._elements[swapIndex] = sinkElement;\n    this._elements[sinkIndex] = swapElement;\n    sinkIndex = swapIndex;\n  }\n};\n\nBinaryHeap.prototype._parentIndex = function(index) {\n  return Math.floor((index - 1) / 2);\n};\n\nBinaryHeap.prototype._childIndexes = function(index) {\n  return [\n    2 * index + 1,\n    2 * index + 2,\n  ];\n  return ;\n};\n\nBinaryHeap.prototype._score = function(element) {\n  return element.valueOf();\n};\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/utils/units.js":"// Time units, as found in Java:\n// see: http://download.oracle.com/javase/6/docs/api/java/util/concurrent/TimeUnit.html\nexports.NANOSECONDS  = 1 / (1000 * 1000);\nexports.MICROSECONDS = 1 / 1000;\nexports.MILLISECONDS = 1;\nexports.SECONDS      = 1000 * exports.MILLISECONDS;\nexports.MINUTES      = 60 * exports.SECONDS;\nexports.HOURS        = 60 * exports.MINUTES;\nexports.DAYS         = 24 * exports.HOURS;\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/utils/probes/Meter.js":"\n// Hacked from https://github.com/felixge/node-measured\n\nvar units = require('../units');\nvar EWMA  = require('../EWMA');\n\nfunction Meter(opts) {\n  var self = this;\n\n  this._tickInterval = 5 * units.SECONDS;\n  this._samples = opts.samples || opts.seconds || 1;\n  this._timeframe = opts.timeframe || 60;\n\n  this._rate     = new EWMA(this._timeframe * units.SECONDS, this._tickInterval);\n\n  if (opts.debug && opts.debug == true)\n    return false;\n\n  this._interval = setInterval(function() {\n    self._rate.tick();\n  }, this._tickInterval);\n\n  this._interval.unref();\n}\n\nMeter.RATE_UNIT     = units.SECONDS;\n\nMeter.prototype.mark = function(n) {\n  n = n || 1;\n\n  this._rate.update(n);\n};\n\nMeter.prototype.val = function() {\n  return Math.round(this._rate.rate(this._samples * Meter.RATE_UNIT) * 100 ) / 100;\n};\n\nmodule.exports = Meter;\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/utils/EWMA.js":"\n// Hacked https://github.com/felixge/node-measured\n\nvar units = require('./units');\n\nmodule.exports = ExponentiallyWeightedMovingAverage;\n\nfunction ExponentiallyWeightedMovingAverage(timePeriod, tickInterval) {\n  this._timePeriod   = timePeriod || 1 * units.MINUTE;\n  this._tickInterval = tickInterval || ExponentiallyWeightedMovingAverage.TICK_INTERVAL;\n  this._alpha        = 1 - Math.exp(-this._tickInterval / this._timePeriod);\n  this._count        = 0;\n  this._rate         = 0;\n};\n\nExponentiallyWeightedMovingAverage.TICK_INTERVAL = 5 * units.SECONDS;\n\nExponentiallyWeightedMovingAverage.prototype.update = function(n) {\n  this._count += n;\n};\n\nExponentiallyWeightedMovingAverage.prototype.tick = function() {\n  var instantRate = this._count / this._tickInterval;\n  this._count     = 0;\n\n  this._rate += (this._alpha * (instantRate - this._rate));\n};\n\nExponentiallyWeightedMovingAverage.prototype.rate = function(timeUnit) {\n  return (this._rate || 0) * timeUnit;\n};\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/utils/alert.js":"var Notify    = require('../notify.js');\nvar Sample    = require('./sample.js');\nvar Histogram = require('./probes/Histogram.js');\nvar debug     = require('debug')('axm:alert:checker');\n\n/**\n * Required:\n * opts.mode\n * opts.value\n *\n * Optional:\n * extra.name\n * opts.cmp\n * opts.interval\n * opts.msg\n * opts.sample\n */\nvar Alert = function(opts, extra) {\n  var self = this;\n  var cmp;\n\n  if (typeof(opts.mode) === 'undefined')\n    return console.error('[Probe][Metric] Mode undefined!');\n  if (typeof(opts.cmp) === 'string') {\n    switch(opts.cmp) {\n      case '>':\n      cmp = function(a,b) {\n          return (a > b);\n        };\n        break;\n      case '<':\n       cmp = function(a, b) {\n          return (a < b);\n        };\n        break;\n      case '=':\n         cmp = function(a,b) {\n          return (a === b);\n        };\n        break;\n      default:\n        return console.error('[Probe][Metric] Mode does not exist!');\n    }\n    self.cmp_mode = opts.cmp;\n    opts.cmp = null;\n  }\n  else {\n    cmp = function(a,b) {\n      return (a > b);\n    };\n    self.cmp_mode = '>';\n  }\n  switch(opts.mode) {\n    case 'threshold':\n      if (typeof(opts.value) === 'undefined')\n        return console.error('[Probe][Metric][threshold] Val undefined!');\n      this.cmp = opts.cmp || function(a,b) {\n        return cmp(parseFloat(a), b);\n      };\n      break;\n    case 'threshold-avg':\n      if (typeof(opts.value) === 'undefined')\n        return console.error('[Probe][Metric][threshold-avg] Val undefined!');\n      this.sample = new Sample(opts.interval || 180);\n      this.cmp = function(value, threshold) {\n        this.sample.update(parseFloat(value));\n        if (this.start) {\n          if (typeof(opts.cmp) !== 'undefined' && opts.cmp !== null)\n            return opts.cmp(this.sample.getMean(), threshold);\n          return cmp(this.sample.getMean(), threshold);\n        }\n      };\n      break;\n    case 'smart':\n      this.sample = new Sample(opts.interval || 300);\n      this.small = new Sample(opts.sample || 30);\n      this.cmp = function(value, threshold) {\n        if (value !== null) {\n          this.sample.update(parseFloat(value));\n          this.small.update(parseFloat(value));\n        //debug('Check', value, Math.exp(- Math.pow(value - this.sample.getMean(), 2) / (2 * this.sample.getVariance())) / (Math.sqrt(2 * Math.PI) * this.sample.getStddev()));\n\n          if (this.start)\n          //return false\n            return (Math.exp(- Math.pow(value - this.sample.getMean(), 2) / (2 * this.sample.getVariance())) / (Math.sqrt(2 * Math.PI) * this.sample.getStddev()) < 0.00000001)\n        }\n        return false;\n      };\n      break;\n    default:\n      return console.error('[Probe][Metric] Mode does not exist!');\n  }\n  this.mode = opts.mode;\n  this.start = false;\n  //Start the data checking after 30s (default)\n  setTimeout(function() {\n    self.start = true;\n  }, opts.timeout || 30000);\n  this.reached = 0;\n  this.nullCheck = 0;\n  this.value =  opts.value || null;\n  this.msg = opts.msg || ((extra && extra.name) ? ('Probe ' + extra.name + ' has reached value') : 'Alert value reached');\n  this.func = opts.func || opts.action || null;\n};\n\nAlert.prototype.tick = function(value) {\n  var self = this;\n  if (this.reached === 0) {\n    //Need 10 times null to trigger alert\n    if (value === null && this.nullCheck < 10) {\n      this.nullCheck += 1;\n    }\n    else if (this.cmp(value, this.value)) {\n      Notify.notify(this.msg + ' ' + this.value);\n      // Delay a bit call to custom function to allow PM2 to receive notify msg\n      if (this.func) setTimeout(function() {self.func(value)}, 50);\n      this.reached = 1;\n      this.nullCheck = 0;\n    }\n  }\n  else if (typeof(this.reached) !== 'undefined') {\n    if (!this.cmp(value, this.value))\n      this.reached = 0;\n  }\n};\n\nAlert.prototype.serialize = function() {\n  var self = this;\n\n  var ret = {\n    mode  : self.mode\n  };\n\n  if (this.mode == 'threshold') {\n    ret.value = self.value;\n    ret.cmp   = self.cmp_mode;\n  }\n\n  if (this.mode == 'threshold-avg') {\n    ret.value    = self.value;\n    ret.interval = self.sample._size;\n    ret.cmp      = self.cmp_mode;\n  }\n\n  return ret;\n};\n\nmodule.exports = Alert;\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/utils/sample.js":"var Sample = function(size) {\n  this._elements = [];\n  this._size = size || 300;\n  this._sum = 0;\n  this._count = 0;\n  this._varianceM = 0;\n  this._varianceS = 0;\n}\n\nSample.prototype.update = function(value) {\n  if (this._count >= this._size) { \n    this._elements.push(value);\n    this._sum += (value - this._elements.shift());\n  }\n  else {\n    this._count++;\n    this._elements.push(value);\n    this._sum += value;\n    var oldM = this._varianceM;\n    this._varianceM += ((value - oldM) / this._count);\n    this._varianceS += ((value - oldM) * (value - this._varianceM));\n  }\n}\n\nSample.prototype.getMean = function() {\n  return (this._count === 0)\n    ? 0\n    : this._sum / this._count;\n}\n\n//need change 1 return - fixes early 0 divide issues\nSample.prototype.getVariance = function () {\n  return (this._count < 2)\n    ? 1\n    :  this._varianceS / (this._count -1)\n}\n\nSample.prototype.getStddev = function () {\n  return (this._count < 2)\n    ? 1\n    : Math.sqrt(this.getVariance());\n}\n\nmodule.exports = Sample;\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/network.js":"var net_module = require('net');\nvar Probe      = require('./Probe.js');\n\nvar Network = module.exports = {};\n\nNetwork.catchPorts = function() {\n  var ports_list = [];\n  var opened_ports = 'N/A';\n\n  Probe.probe().metric({\n    name    : 'Open ports',\n    value   : function() { return opened_ports; }\n  });\n\n  var original_listen = net_module.Server.prototype.listen;\n\n  net_module.Server.prototype.listen = function() {\n    var port = parseInt(arguments[0]);\n\n    if (!isNaN(port) && ports_list.indexOf(port) === -1) {\n      ports_list.push(port);\n      opened_ports = ports_list.sort().join();\n    }\n\n    this.once('close', function() {\n      if (ports_list.indexOf(port) > -1) {\n        ports_list.splice(ports_list.indexOf(port), 1);\n        opened_ports = ports_list.sort().join();\n      }\n    });\n\n    return original_listen.apply(this, arguments);\n  };\n};\n\nNetwork.catchTraffic = function() {\n  var download = 0;\n  var upload   = 0;\n  var up       = '0 B/sec';\n  var down     = '0 B/sec';\n\n  var filter = function(bytes) {\n    var to_fixed = 0;\n\n    if (bytes === 0)\n      ;\n    else if (bytes < 1024)\n      to_fixed = 6;\n    else if (bytes < (1024 * 1024))\n      to_fixed = 3;\n    else\n      to_fixed = 2;\n\n    bytes = (bytes / (1024 * 1024)).toFixed(to_fixed);\n\n    var cut_zeros = 0;\n\n    for (var i = (bytes.length - 1); i > 0; --i) {\n      if (bytes[i] === '.') {\n        ++cut_zeros;\n        break;\n      }\n      if (bytes[i] !== '0')\n        break;\n      ++cut_zeros;\n    }\n\n    if (cut_zeros > 0)\n      bytes = bytes.slice(0, -(cut_zeros));\n\n    return (bytes + ' MB/s');\n  };\n\n  var interval = setInterval(function() {\n    up = filter(upload);\n    down = filter(download);\n    upload = 0;\n    download = 0;\n  }, 999);\n\n  interval.unref();\n\n  Probe.probe().metric({\n    name     : 'Network Download',\n    agg_type : 'sum',\n    value    : function() { return down; }\n  });\n\n  Probe.probe().metric({\n    name     : 'Network Upload',\n    agg_type : 'sum',\n    value    : function() { return up; }\n  });\n\n  var original_write = net_module.Socket.prototype.write;\n\n  net_module.Socket.prototype.write = function(data) {\n    if (data.length)\n      upload += data.length;\n    return original_write.apply(this, arguments);\n  };\n\n  var original_read = net_module.Socket.prototype.read;\n\n  net_module.Socket.prototype.read = function() {\n\n    if (!this.monitored) {\n      this.monitored = true;\n\n      this.on('data', function(data) {\n        if (data.length)\n          download += data.length;\n      });\n    }\n\n    return original_read.apply(this, arguments);\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/monitor.js":"\nvar Transport = require('./utils/transport.js');\nvar debug = require('debug')('axm:monitor');\n\nvar Monitor = {};\n\nfunction cookData(data) {\n  var cooked_data = {};\n\n  Object.keys(data).forEach(function(probe_name) {\n    if (typeof(data[probe_name]) == 'function')\n      cooked_data[probe_name] = data[probe_name]();\n    else\n      cooked_data[probe_name] = data[probe_name];\n  });\n  return cooked_data;\n};\n\nfunction enableProbes(custom_namespace) {\n  if (!custom_namespace)\n    custom_namespace = 'axm';\n\n  if (!global[custom_namespace])\n    global[custom_namespace] = {};\n\n  if (this.interval)\n    return global[custom_namespace];\n\n  this.interval = setInterval(function() {\n    Transport.send({\n      type : 'axm:monitor',\n      data : cookData(global[custom_namespace])\n    });\n  }, 990);\n\n  this.interval.unref();\n\n  return global[custom_namespace];\n};\n\nfunction stopProbing() {\n  clearInterval(this.interval);\n}\n\nMonitor.enableProbes = enableProbes;\nMonitor.enableProbe = enableProbes;\n\nMonitor.stopProbe = stopProbing;\nMonitor.stopProbes = stopProbing;\n\nmodule.exports = Monitor;\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/probes/profiling.js":"\nvar debug     = require('debug')('axm:profiling');\nvar os        = require('os');\nvar path      = require('path');\nvar fs        = require('fs');\n\nvar Options   = require('../configuration.js');\n\nvar Profiling = module.exports = {};\n\nProfiling.exposeProfiling = function(pmx, profiler_path) {\n  try {\n    var profiler = require(profiler_path);\n  } catch(e) {\n    debug('v8-profiler module not installed', e);\n    return false;\n  }\n\n  debug('v8-profiler sucessfully enabled');\n\n  /**\n   * Tell Keymetrics that profiling is possible\n   * (flag available in axm_options object)\n   */\n  Options.configureModule({\n    heapdump : true\n  });\n\n  /**\n   * Heap snapshot\n   */\n  pmx.action('km:heapdump', function(reply) {\n    var dump_file = path.join(os.tmpDir(), Date.now() + '.heapsnapshot');\n\n    var snapshot = profiler.takeSnapshot('km-heap-snapshot');\n    var buffer    = '';\n\n    snapshot.serialize(\n      function iterator(data, length) {\n        buffer += data;\n      }, function complete() {\n        snapshot.delete();\n\n        fs.writeFile(dump_file, buffer, function (err) {\n          debug('Heap dump file flushed (e=', err);\n\n          if (err) {\n            return reply({\n              success   : false,\n              err : err\n            });\n          }\n          return reply({\n            success   : true,\n            heapdump  : true,\n            dump_file : dump_file\n          });\n        });\n      }\n    );\n  });\n\n  /**\n   * CPU profiling snapshot\n   */\n  var ns_cpu_profiling        = 'km-cpu-profiling';\n  var cpu_dump_file = path.join(os.tmpDir(), Date.now() + '.cpuprofile');\n\n  pmx.action('km:cpu:profiling:start', function(reply) {\n    profiler.startProfiling(ns_cpu_profiling);\n    return reply({ success : true });\n  });\n\n  pmx.action('km:cpu:profiling:stop', function(reply) {\n    var cpu = profiler.stopProfiling(ns_cpu_profiling);\n\n    fs.writeFile(cpu_dump_file, JSON.stringify(cpu), function(err) {\n      if (err) {\n        return reply({\n          success   : false,\n          err : err\n        });\n      }\n      return reply({\n        success     : true,\n        cpuprofile  : true,\n        dump_file   : cpu_dump_file\n      });\n    });\n  });\n\n};\n\n/**\n * Discover v8-profiler\n */\nProfiling.detectV8Profiler = function(cb) {\n  var require_paths = require.main.paths.slice();\n\n  (function look_for_profiler(require_paths) {\n    if (!require_paths[0])\n      return cb(new Error('Module not found'));\n\n    var profiler_path = path.join(require_paths[0], 'v8-profiler');\n\n    fs.exists(profiler_path, function(exist) {\n      if (exist)\n        return cb(null, profiler_path);\n\n      require_paths.shift();\n      return look_for_profiler(require_paths);\n    });\n    return false;\n  })(require_paths);\n};\n\nProfiling.v8Profiling = function(pmx) {\n  Profiling.detectV8Profiler(function(err, profiler_path) {\n    if (err)\n      return false;\n    return Profiling.exposeProfiling(pmx, profiler_path);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/actions/default.js":"\nvar fs = require('fs');\nvar path = require('path');\n\nmodule.exports = function(pmx) {\n  pmx.action('getEnv', function(reply) {\n    var omit = ['name', 'exec_mode', 'env', 'args', 'pm_cwd', 'exec_interpreter', 'pm_exec_path', 'node_args', 'pm_out_log_path', 'pm_err_log_path', 'pm_pid_path', 'pm_id', 'status', 'pm_uptime', 'created_at', 'unstable_restarts', 'restart_time', 'axm_actions', 'pmx_module', 'command', 'watch', 'versioning', 'vizion_runing', 'MODULE_DEBUG', 'pmx', 'axm_options', 'created_at', 'watch', 'vizion', 'axm_dynamic', 'axm_monitor', 'instances', 'automation', 'unstable_restart', 'treekill'];\n    var origin = {};\n    var keys = Object.keys(process.env);\n    var i = keys.length;\n    while (i--) {\n  \t  if (omit.indexOf(keys[i]) == -1 && origin[keys[i]] != '[object Object]')\n        origin[keys[i]] = process.env[keys[i]];\n    }\n\n    process.nextTick(function() {\n      return reply(origin);\n    });\n  });\n\n  // pmx.action('getDeps', function(reply) {\n  //   process.nextTick(function() {\n  //     return reply({ module_cache : Object.keys(require('module')._cache) });\n  //   });\n  // });\n}\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/probes/express.js":"\nmodule.exports = function(pmx, tracer) {\n\n  var response_time = pmx.probe().histogram({\n    name        : 'Express: response time',\n    measurement : 'mean',\n    unit        : 'ms'\n  });\n\n  var req_per_min = pmx.probe().meter({\n    name      : 'Express: req/min',\n    samples   : 1,\n    timeframe : 60\n  });\n\n  tracer.on('express', function (data) {\n    req_per_min.mark();\n    if (data.duration)\n      response_time.update(data.duration)\n  })\n  \n};\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/probes/modules.js":"\nmodule.exports = function(pmx) {\n  var metric = pmx.probe().metric({\n    name        : 'Modules',\n    value : function() { return 'N/A' }\n  });\n\n  var pace_interval = setInterval(function() {\n    var module_count;\n\n    try {\n      module_count = Object.keys(require('module')._cache).length;\n    } catch(e) {\n      return false;\n    }\n\n    metric.set(module_count);\n  }, 3000);\n\n  pace_interval.unref();\n};\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/probes/mongo.js":"\nmodule.exports = function(pmx, tracer) {\n\n  var response_time = pmx.probe().histogram({\n    name        : 'Mongodb: query time',\n    measurement : 'mean',\n    unit        : 'ms'\n  });\n\n  var req_per_min = pmx.probe().meter({\n    name      : 'Mongodb: req/min',\n    samples   : 1,\n    timeframe : 60\n  });\n\n  tracer.on('mongo', function (data) {\n    req_per_min.mark();\n    if (data.duration)\n      response_time.update(data.duration)\n  })\n  \n};\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/probes/pacemaker.js":"\nmodule.exports = function(pmx) {\n  var TIME_INTERVAL = 1000;\n\n  var oldTime = process.hrtime();\n\n  var histogram = pmx.probe().histogram({\n    name        : 'Loop delay',\n    measurement : 'mean',\n    unit        : 'ms'\n  });\n\n  var pace_interval = setInterval(function() {\n    var newTime = process.hrtime();\n    var delay = (newTime[0] - oldTime[0]) * 1e3 + (newTime[1] - oldTime[1]) / 1e6 - TIME_INTERVAL;\n    oldTime = newTime;\n    histogram.update(delay);\n  }, TIME_INTERVAL);\n\n  pace_interval.unref();\n};\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/utils/datachecker.js":"\nvar probe     = require('../Probe.js');\nvar Histogram = require('./probes/Histogram.js');\nvar debug     = require('debug')('axm:smart:checker');\n\n /**\n  * new smart({\n  *   refresh   : function,   Returns monitored value\n  *   callback  : function,   Called when error is detected\n  *   dev       : 0.2,        Deviation that triggers the error\n  *   timer     : 100<ms>,    Value refresh interval\n  *   launch    : 10000<ms>,  Timelength after which monitoring begins\n  *   ceil      : 5           Number of times an error is detected before triggering callback\n  *   calcDEv   : mean        How to compute the deviation\n  * });\n  */\n\nfunction dataChecker(opts) {\n  var self = this;\n  this._counter = 0;\n\n  opts = opts || {};\n\n  if (typeof(opts.refresh) !== 'function')\n    throw new Error('Refresh not defined or not a function');\n\n  this._refresh = opts.refresh;\n\n  this._monitored = false;\n  this._launch = opts.launch || 10000;\n  this._ceil = opts.ceil || 5;\n  this._timer = opts.timer || 1000;\n  this._dev   = opts.dev || 0.2;\n  this._callback = opts.callback || null;\n  this._histogram = new Histogram();\n  this._calcDev = opts.calcDev || 'ema';\n\n  /*\n   * Select function to compute deviation\n   */\n  var func = {\n    ema    : this.normalDev,\n    mean   : this.medianDev\n  }\n  this.computeDev = func[this._calcDev];\n\n  /**\n   * Display some probe if we need to debug\n   */\n  if (opts.debug === true) {\n    if (opts.probes.indexOf('val') != -1) {\n      this._metric2 = new probe.metric({\n        name  : 'Value',\n        value : function() {\n          return self._refresh();\n        }\n      });\n    }\n    if (opts.probes.indexOf('ema') != -1) {\n      this._metric3 = new probe.metric({\n        name  : 'EMA',\n        value : function() {\n          return self._histogram.getEma();\n        }\n      });\n    }\n  }\n  /**\n    * Delay before monitoring starts\n    */\n  setTimeout(function() {\n    self._monitored = true;\n  }, this._launch);\n  this.start();\n};\n\n//Calculate deviation of current value compared to EMA\ndataChecker.prototype.normalDev = function() {\n  return ((this._refresh() - this._histogram.getEma()) / this._histogram.getEma() > this._dev);\n}\n\n//Calculate deviation of current EMA compared to Mean\ndataChecker.prototype.medianDev = function() {\n  return ((this._histogram.getEma() - this._histogram._calculateMean()) / this._histogram._calculateMean() > this._dev);\n}\n\ndataChecker.prototype.stop = function() {\n  clearInterval(this._interval_timer);\n};\n\ndataChecker.prototype.start = function() {\n  var self = this;\n\n  debug('Checker started');\n\n  this._interval_timer = setInterval(function() {\n    self._histogram.update(self._refresh());\n\n    debug('Check', self._refresh(), self._histogram._calculateMean(), self._histogram.getEma());\n\n    if (self._monitored === true && self.computeDev() === true) {\n      self._counter++;\n      /**\n        * Triggers callback after N consecutive errors, then resets the counter\n        */\n      if (self._counter >= self._ceil) {\n        debug('Anomaly detected', self._histogram.getEma(), self._refresh());\n        self._callback();\n        self.counter = 0;\n      }\n    }\n    else\n      self._counter = 0;\n  }, self._timer);\n\n  this._interval_timer.unref();\n};\n\nmodule.exports = dataChecker;\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/utils/fixedQueue.js":"function FixedQueue( size, initialValues ){\n\n  // If there are no initial arguments, default it to\n  // an empty value so we can call the constructor in\n  // a uniform way.\n  initialValues = (initialValues || []);\n\n  // Create the fixed queue array value.\n  var queue = Array.apply( null, initialValues );\n\n  // Store the fixed size in the queue.\n  queue.fixedSize = size;\n\n  // Add the class methods to the queue. Some of these have\n  // to override the native Array methods in order to make\n  // sure the queue lenght is maintained.\n  queue.push = FixedQueue.push;\n  queue.splice = FixedQueue.splice;\n  queue.unshift = FixedQueue.unshift;\n\n  // Trim any initial excess from the queue.\n  FixedQueue.trimTail.call( queue );\n\n  // Return the new queue.\n  return( queue );\n\n}\n\n\n// I trim the queue down to the appropriate size, removing\n// items from the beginning of the internal array.\nFixedQueue.trimHead = function(){\n\n  // Check to see if any trimming needs to be performed.\n  if (this.length <= this.fixedSize){\n\n    // No trimming, return out.\n    return;\n\n  }\n\n  // Trim whatever is beyond the fixed size.\n  Array.prototype.splice.call(\n    this,\n    0,\n    (this.length - this.fixedSize)\n  );\n\n};\n\n\n// I trim the queue down to the appropriate size, removing\n// items from the end of the internal array.\nFixedQueue.trimTail = function(){\n\n  // Check to see if any trimming needs to be performed.\n  if (this.length <= this.fixedSize){\n\n    // No trimming, return out.\n    return;\n\n  }\n\n  // Trim whatever is beyond the fixed size.\n  Array.prototype.splice.call(\n    this,\n    this.fixedSize,\n    (this.length - this.fixedSize)\n  );\n\n};\n\n\n// I synthesize wrapper methods that call the native Array\n// methods followed by a trimming method.\nFixedQueue.wrapMethod = function( methodName, trimMethod ){\n\n  // Create a wrapper that calls the given method.\n  var wrapper = function(){\n\n    // Get the native Array method.\n    var method = Array.prototype[ methodName ];\n\n    // Call the native method first.\n    var result = method.apply( this, arguments );\n\n    // Trim the queue now that it's been augmented.\n    trimMethod.call( this );\n\n    // Return the original value.\n    return( result );\n\n  };\n\n  // Return the wrapper method.\n  return( wrapper );\n\n};\n\n\n// Wrap the native methods.\nFixedQueue.push = FixedQueue.wrapMethod(\n  \"push\",\n  FixedQueue.trimHead\n);\n\nFixedQueue.splice = FixedQueue.wrapMethod(\n  \"splice\",\n  FixedQueue.trimTail\n);\n\nFixedQueue.unshift = FixedQueue.wrapMethod(\n  \"unshift\",\n  FixedQueue.trimTail\n);\n","/home/travis/build/npmtest/node-npmtest-pmx/node_modules/pmx/lib/utils/error-callsites/node-0.10-formatter.js":"'use strict'\n\n// Lifted from Node.js 0.10.40:\n// https://github.com/nodejs/node/blob/0439a28d519fb6efe228074b0588a59452fc1677/deps/v8/src/messages.js#L1053-L1080\nmodule.exports = function FormatStackTrace (error, frames) {\n  var lines = []\n  try {\n    lines.push(error.toString())\n  } catch (e) {\n    try {\n      lines.push('<error: ' + e + '>')\n    } catch (ee) {\n      lines.push('<error>')\n    }\n  }\n  for (var i = 0; i < frames.length; i++) {\n    var frame = frames[i]\n    var line\n    try {\n      line = frame.toString()\n    } catch (e) {\n      try {\n        line = '<error: ' + e + '>'\n      } catch (ee) {\n        // Any code that reaches this point is seriously nasty!\n        line = '<error>'\n      }\n    }\n    lines.push('    at ' + line)\n  }\n  return lines.join('\\n')\n}\n"}